import dotenv from 'dotenv';
import mongoose from 'mongoose';
import notificationService from './src/features/communication/services/notification.service.js';
import Clase from './src/features/clases-management/models/clase.entity.js';
import User from './src/core/models/user.model.js';
import Alumno from './src/core/models/alumnos.model.js';
import Role from './src/core/models/role.model.js';

dotenv.config();

async function testCambioHorarioNotification() {
  try {
    console.log('üîß Conectando a MongoDB...');
    await mongoose.connect(process.env.DB_URL);
    console.log('‚úÖ Conexi√≥n exitosa a MongoDB');

    // Buscar un usuario administrador
    const adminUser = await User.findOne().populate('roles');
    if (!adminUser) {
      console.error('‚ùå No se encontr√≥ ning√∫n usuario administrador');
      return;
    }
    console.log('üë§ Usuario administrador encontrado:', adminUser.email);

    // Buscar una clase con estudiantes y profesor asignado
    const clase = await Clase.findOne({
      'estudiantes.0': { $exists: true },
      profesor: { $exists: true, $ne: null },
      estado: 'programada'
    }).populate('estudiantes.alumno').populate('profesor');

    if (!clase) {
      console.error('‚ùå No se encontr√≥ ninguna clase con estudiantes y profesor');
      return;
    }

    console.log('üìö Clase encontrada:', {
      id: clase._id,
      titulo: clase.titulo,
      estudiantes: clase.estudiantes.length,
      profesor: clase.profesor ? clase.profesor.email : 'No asignado'
    });

    // Mostrar informaci√≥n de los estudiantes
    console.log('üë• Estudiantes en la clase:');
    clase.estudiantes.forEach((estudiante, index) => {
      console.log(`  ${index + 1}. ${estudiante.alumno.nombreAlumno} (${estudiante.alumno.rutAlumno})`);
      console.log(`     üìß Email: ${estudiante.alumno.email || 'No disponible'}`);
      console.log(`     üì± Tel√©fono: ${estudiante.alumno.telefono || 'No disponible'}`);
    });

    // Simular cambio de horario
    const horaAnterior = "10:00 - 11:00";
    const horaNueva = "14:00 - 15:00";

    console.log('\nüîî Probando notificaci√≥n de cambio de horario...');
    console.log(`üìÖ Cambio: ${horaAnterior} ‚Üí ${horaNueva}`);

    const resultado = await notificationService.notifyClassTimeChange(
      clase,
      horaAnterior,
      horaNueva,
      adminUser._id
    );

    if (resultado.success) {
      console.log('‚úÖ Notificaci√≥n de cambio de horario enviada correctamente');
      console.log('üìä Resultados:', resultado.results);
      
      // Mostrar estad√≠sticas detalladas
      const stats = resultado.results;
      console.log('\nüìà Estad√≠sticas de env√≠o:');
      console.log(`   ‚Ä¢ Mensajes internos: ${stats.internos.enviados}/${stats.internos.enviados + stats.internos.errores}`);
      console.log(`   ‚Ä¢ WhatsApp: ${stats.whatsapp.enviados}/${stats.whatsapp.enviados + stats.whatsapp.errores}`);
      console.log(`   ‚Ä¢ Email: ${stats.email.enviados}/${stats.email.enviados + stats.email.errores}`);
      console.log(`   ‚Ä¢ Errores totales: ${stats.internos.errores + stats.whatsapp.errores + stats.email.errores}`);
      
      // Mostrar detalles por estudiante
      console.log('\nüìã Detalles por estudiante:');
      stats.detalles.forEach((detalle, index) => {
        console.log(`   ${index + 1}. ${detalle.estudiante} (${detalle.rut}):`);
        console.log(`      ‚úÖ Interno: ${detalle.internos ? 'Enviado' : 'Error'}`);
        console.log(`      üì± WhatsApp: ${detalle.whatsapp ? 'Enviado' : 'Error'}`);
        console.log(`      üìß Email: ${detalle.email ? 'Enviado' : 'Error'}`);
        if (detalle.errores.length > 0) {
          console.log(`      ‚ùå Errores: ${detalle.errores.join(', ')}`);
        }
      });
    } else {
      console.error('‚ùå Error en notificaci√≥n:', resultado.error);
    }

  } catch (error) {
    console.error('‚ùå Error en prueba:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado de MongoDB');
  }
}

// Ejecutar la prueba
testCambioHorarioNotification(); 