import dotenv from 'dotenv';
import mongoose from 'mongoose';
import whatsappWebService from './src/features/communication/services/whatsappWeb.service.js';
import messagingService from './src/features/communication/services/messaging.service.js';

dotenv.config();

async function diagnoseWhatsApp() {
  try {
    console.log('üîß Conectando a MongoDB...');
    await mongoose.connect(process.env.DB_URL);
    console.log('‚úÖ Conexi√≥n exitosa a MongoDB');

    console.log('\nüì± DIAGN√ìSTICO DE WHATSAPP WEB');
    console.log('================================');

    // 1. Verificar configuraci√≥n
    console.log('\n1Ô∏è‚É£ Verificando configuraci√≥n...');
    console.log('üìÅ Session Path:', process.env.WHATSAPP_SESSION_PATH || './.wwebjs_auth');
    console.log('üîß Puppeteer Args:', process.env.WHATSAPP_PUPPETEER_ARGS || 'default');
    console.log('‚è±Ô∏è Timeout:', process.env.WHATSAPP_TIMEOUT || '60000');

    // 2. Verificar estado del servicio
    console.log('\n2Ô∏è‚É£ Verificando estado del servicio...');
    const status = whatsappWebService.getStatus();
    console.log('üìä Estado:', status);

    // 3. Verificar si hay sesi√≥n guardada
    console.log('\n3Ô∏è‚É£ Verificando sesi√≥n guardada...');
    const fs = await import('fs');
    const path = await import('path');
    
    const sessionPath = path.default.resolve(process.env.WHATSAPP_SESSION_PATH || './.wwebjs_auth');
    const sessionExists = fs.default.existsSync(sessionPath);
    console.log('üìÅ Directorio de sesi√≥n existe:', sessionExists);
    
    if (sessionExists) {
      const files = fs.default.readdirSync(sessionPath);
      console.log('üìÑ Archivos en sesi√≥n:', files);
    }

    // 4. Probar inicializaci√≥n
    console.log('\n4Ô∏è‚É£ Probando inicializaci√≥n...');
    try {
      await whatsappWebService.initialize();
      console.log('‚úÖ Inicializaci√≥n exitosa');
      
      // Esperar un momento para ver si se conecta
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      const newStatus = whatsappWebService.getStatus();
      console.log('üìä Estado despu√©s de inicializaci√≥n:', newStatus);
      
    } catch (error) {
      console.error('‚ùå Error en inicializaci√≥n:', error.message);
    }

    // 5. Probar env√≠o de mensaje
    console.log('\n5Ô∏è‚É£ Probando env√≠o de mensaje...');
    try {
      const testResult = await messagingService.sendWhatsAppMessage(
        '+56912345678', // N√∫mero de prueba
        'üîî Prueba de notificaci√≥n de cambio de horario'
      );
      console.log('üì§ Resultado del env√≠o:', testResult);
    } catch (error) {
      console.error('‚ùå Error enviando mensaje:', error.message);
    }

    // 6. Verificar QR si es necesario
    console.log('\n6Ô∏è‚É£ Verificando c√≥digo QR...');
    const qrCode = whatsappWebService.getQrCode();
    if (qrCode) {
      console.log('üì± C√≥digo QR disponible:', qrCode ? 'S√≠' : 'No');
      console.log('üí° Necesitas escanear el c√≥digo QR con WhatsApp');
    } else {
      console.log('‚úÖ No se necesita c√≥digo QR (ya autenticado)');
    }

    // 7. Recomendaciones
    console.log('\n7Ô∏è‚É£ RECOMENDACIONES');
    console.log('==================');
    
    const currentStatus = whatsappWebService.getStatus();
    if (!currentStatus.isReady) {
      console.log('‚ö†Ô∏è WhatsApp no est√° listo. Posibles soluciones:');
      console.log('   ‚Ä¢ Escanea el c√≥digo QR con WhatsApp');
      console.log('   ‚Ä¢ Verifica que WhatsApp est√© abierto en tu tel√©fono');
      console.log('   ‚Ä¢ Reinicia el servicio si es necesario');
    } else {
      console.log('‚úÖ WhatsApp est√° funcionando correctamente');
    }

    console.log('\nüìã Comandos √∫tiles:');
    console.log('   ‚Ä¢ Reiniciar WhatsApp: curl -X POST http://localhost:1230/api/messaging/whatsapp/reset');
    console.log('   ‚Ä¢ Ver estado: curl -X GET http://localhost:1230/api/messaging/whatsapp/status');
    console.log('   ‚Ä¢ Obtener QR: curl -X GET http://localhost:1230/api/messaging/whatsapp/qr');

  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Desconectado de MongoDB');
  }
}

// Ejecutar diagn√≥stico
diagnoseWhatsApp(); 